// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/babon21/excel-offer-storage/internal/offer/domain"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/babon21/excel-offer-storage/internal/offer/usecase"
)

// OfferUseCase is an autogenerated mock type for the OfferUseCase type
type OfferUseCase struct {
	mock.Mock
}

// GetList provides a mock function with given fields: sellerId, offerId, offerName
func (_m *OfferUseCase) GetList(sellerId string, offerId string, offerName string) ([]domain.Offer, error) {
	ret := _m.Called(sellerId, offerId, offerName)

	var r0 []domain.Offer
	if rf, ok := ret.Get(0).(func(string, string, string) []domain.Offer); ok {
		r0 = rf(sellerId, offerId, offerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Offer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(sellerId, offerId, offerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: sellerId, url
func (_m *OfferUseCase) Store(sellerId string, url string) (usecase.Statistic, error) {
	ret := _m.Called(sellerId, url)

	var r0 usecase.Statistic
	if rf, ok := ret.Get(0).(func(string, string) usecase.Statistic); ok {
		r0 = rf(sellerId, url)
	} else {
		r0 = ret.Get(0).(usecase.Statistic)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sellerId, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
